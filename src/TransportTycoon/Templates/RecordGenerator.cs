

//------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a magic.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
// ReSharper disable CheckNamespace

namespace TransportTycoon
{
    [System.Diagnostics.DebuggerDisplay("{Location} ({Distance})")]
    internal sealed class Destination: IEquatable<Destination>
    {
        public Destination(TransportTycoon.Location location, int distance, int loadDuration = 0, int unloadDuration = 0)
        {
            Location = location;
            Distance = distance;
            LoadDuration = loadDuration;
            UnloadDuration = unloadDuration;
        }

        public TransportTycoon.Location Location { get; }

        public int Distance { get; }

        public int LoadDuration { get; }

        public int UnloadDuration { get; }

        #region Equality and Deconstruct Members

        public bool Equals(Destination other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Equals(Location, other.Location) &&
                Equals(Distance, other.Distance) &&
                Equals(LoadDuration, other.LoadDuration) &&
                Equals(UnloadDuration, other.UnloadDuration);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Destination);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
                hashCode = (hashCode * 397) ^ (Location.GetHashCode());
                hashCode = (hashCode * 397) ^ (Distance.GetHashCode());
                hashCode = (hashCode * 397) ^ (LoadDuration.GetHashCode());
                hashCode = (hashCode * 397) ^ (UnloadDuration.GetHashCode());
                return hashCode;
            }
        }

        public void Deconstruct(out TransportTycoon.Location location, out int distance, out int loadDuration, out int unloadDuration)
        {
            location = Location;
            distance = Distance;
            loadDuration = LoadDuration;
            unloadDuration = UnloadDuration;
        }

        #endregion Equality and Deconstruct Members

    }

    [System.Diagnostics.DebuggerDisplay("{VehicleType} —[ {Cargo} ]→ {Location}")]
    internal sealed class Waypoint: IEquatable<Waypoint>
    {
        public Waypoint(TransportTycoon.Location location, TransportTycoon.VehicleType vehicleType, char cargo)
        {
            Location = location;
            VehicleType = vehicleType;
            Cargo = cargo;
        }

        public TransportTycoon.Location Location { get; }

        public TransportTycoon.VehicleType VehicleType { get; }

        public char Cargo { get; }

        #region Equality and Deconstruct Members

        public bool Equals(Waypoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Equals(Location, other.Location) &&
                Equals(VehicleType, other.VehicleType) &&
                Equals(Cargo, other.Cargo);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Waypoint);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
                hashCode = (hashCode * 397) ^ (Location.GetHashCode());
                hashCode = (hashCode * 397) ^ (VehicleType.GetHashCode());
                hashCode = (hashCode * 397) ^ (Cargo.GetHashCode());
                return hashCode;
            }
        }

        public void Deconstruct(out TransportTycoon.Location location, out TransportTycoon.VehicleType vehicleType, out char cargo)
        {
            location = Location;
            vehicleType = VehicleType;
            cargo = Cargo;
        }

        #endregion Equality and Deconstruct Members

    }

}

