<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="RecordBuilder.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a magic.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------

<#
    foreach (var ns in StandardNamespaces)
    {
#>
using <#= ns #>;
<#
    }
#>
// ReSharper disable CheckNamespace

<#
    foreach (var recordGroup in RecordBuilder.Build().GroupBy(record => record.Namespace).OrderBy(g => g.Key))
    {
#>
namespace <#= recordGroup.Key #>
{
<#
        foreach (var recordDefinition in recordGroup)
        {
#>
    <#= recordDefinition.Access #> sealed class <#= recordDefinition.Name #>: <#= recordDefinition.ParentTypeName == null ? String.Empty : recordDefinition.ParentTypeName + ", "  #>IEquatable<<#= recordDefinition.Name #>>
    {
        public <#= recordDefinition.Name #>(<#= OneLineParameters(recordDefinition.Members) #>)
        {
<#
            foreach (var member in recordDefinition.Members)
            {
#>
            <#= member.Name #> = <#= member.FormatCamelCaseName() #>;
<#
            }
#>
        }

<#
            foreach (var member in recordDefinition.Members)
            {
#>
        public <#= ShortNamespace(member.TypeName) #> <#= member.Name #> { get; }

<#
            }
#>
        #region Equality and Deconstruct Members

        public bool Equals(<#= recordDefinition.Name #> other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
<#
            var lastMember = recordDefinition.Members.Last();
            foreach (var member in recordDefinition.Members)
            {
#>
                <#= FormatEquals(member, ReferenceEquals(member, lastMember)) #>
<#
            }
#>
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as <#= recordDefinition.Name #>);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
<#
            foreach (var member in recordDefinition.Members)
            {
#>
                hashCode = (hashCode * 397) ^ (<#= member.FormatGetHashCode() #>);
<#
            }
#>
                return hashCode;
            }
        }

        public void Deconstruct(<#= OneLineOutParameters(recordDefinition.Members) #>)
        {
<#
            foreach (var member in recordDefinition.Members)
            {
#>
            <#= member.FormatCamelCaseName() #> = <#= member.Name #>;
<#
            }
#>
        }

        #endregion Equality and Deconstruct Members

    }

<#
        }
#>
}

<#
    }
#>
<#+
    private static readonly IReadOnlyList<string> StandardNamespaces = new List<string>
    {
        "System",
        "System.Collections",
        "System.Collections.Generic"
    };

    private static string ShortNamespace(string typeName)
    {
        var separatorLength = ".".Length;
        foreach (var ns in StandardNamespaces.Reverse())
        {
            if (typeName.StartsWith(ns))
            {
                var shortName = typeName.Substring(ns.Length + separatorLength);
                if (!shortName.Contains('.'))
                {
                    return shortName;
                }
            }
        }

        return typeName;
    }

    private static string OneLineParameters(IReadOnlyList<RecordMemberDefinition> members)
    {
        return String.Join(", ", members.Select(FormatOneLineParameter));
    }

    private static string FormatOneLineParameter(RecordMemberDefinition member)
    {
        return String.Format(
            "{0} {1}{2}",
            ShortNamespace(member.TypeName),
            member.FormatCamelCaseName(),
            member.DefaultValue == null ? String.Empty : " = " + member.DefaultValue);
    }

    private static string OneLineOutParameters(IReadOnlyList<RecordMemberDefinition> members)
    {
        return String.Join(", ", members
            .Select(member => "out " + ShortNamespace(member.TypeName) + " " + member.FormatCamelCaseName()));
    }

    private static string FormatEquals(RecordMemberDefinition member, bool isLast)
    {
        return member.FormatEqualsWith("other") + (isLast ? ";" : " &&");
    }
#>