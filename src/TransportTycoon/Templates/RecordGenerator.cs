

//------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a magic.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
// ReSharper disable CheckNamespace

namespace TransportTycoon
{
    [System.Diagnostics.DebuggerDisplay("{Id} ({Origin} → {Destination})")]
    internal sealed class Cargo: IEquatable<Cargo>
    {
        public Cargo(int id, TransportTycoon.Location origin, TransportTycoon.Location destination)
        {
            Id = id;
            Origin = origin;
            Destination = destination;
        }

        public int Id { get; }

        public TransportTycoon.Location Origin { get; }

        public TransportTycoon.Location Destination { get; }

        #region Equality and Deconstruct Members

        public bool Equals(Cargo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Equals(Id, other.Id) &&
                Equals(Origin, other.Origin) &&
                Equals(Destination, other.Destination);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Cargo);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
                hashCode = (hashCode * 397) ^ (Id.GetHashCode());
                hashCode = (hashCode * 397) ^ (Origin.GetHashCode());
                hashCode = (hashCode * 397) ^ (Destination.GetHashCode());
                return hashCode;
            }
        }

        public void Deconstruct(out int id, out TransportTycoon.Location origin, out TransportTycoon.Location destination)
        {
            id = Id;
            origin = Origin;
            destination = Destination;
        }

        #endregion Equality and Deconstruct Members

    }

    [System.Diagnostics.DebuggerDisplay("Travel = {TravelDuration} (L = {LoadDuration}, U = {UnloadDuration})")]
    internal sealed class Destination: IEquatable<Destination>
    {
        public Destination(TransportTycoon.Location location, int travelDuration, int loadDuration = 0, int unloadDuration = 0)
        {
            Location = location;
            TravelDuration = travelDuration;
            LoadDuration = loadDuration;
            UnloadDuration = unloadDuration;
        }

        public TransportTycoon.Location Location { get; }

        public int TravelDuration { get; }

        public int LoadDuration { get; }

        public int UnloadDuration { get; }

        #region Equality and Deconstruct Members

        public bool Equals(Destination other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Equals(Location, other.Location) &&
                Equals(TravelDuration, other.TravelDuration) &&
                Equals(LoadDuration, other.LoadDuration) &&
                Equals(UnloadDuration, other.UnloadDuration);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Destination);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
                hashCode = (hashCode * 397) ^ (Location.GetHashCode());
                hashCode = (hashCode * 397) ^ (TravelDuration.GetHashCode());
                hashCode = (hashCode * 397) ^ (LoadDuration.GetHashCode());
                hashCode = (hashCode * 397) ^ (UnloadDuration.GetHashCode());
                return hashCode;
            }
        }

        public void Deconstruct(out TransportTycoon.Location location, out int travelDuration, out int loadDuration, out int unloadDuration)
        {
            location = Location;
            travelDuration = TravelDuration;
            loadDuration = LoadDuration;
            unloadDuration = UnloadDuration;
        }

        #endregion Equality and Deconstruct Members

    }

    [System.Diagnostics.DebuggerDisplay("{TransportType} —[ {From} ]→ {To}")]
    internal sealed class Track: IEquatable<Track>
    {
        public Track(TransportTycoon.Location from, TransportTycoon.TransportType transportType, TransportTycoon.Location? to)
        {
            From = from;
            TransportType = transportType;
            To = to;
        }

        public TransportTycoon.Location From { get; }

        public TransportTycoon.TransportType TransportType { get; }

        public TransportTycoon.Location? To { get; }

        #region Equality and Deconstruct Members

        public bool Equals(Track other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Equals(From, other.From) &&
                Equals(TransportType, other.TransportType) &&
                Equals(To, other.To);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Track);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = 0;
                hashCode = (hashCode * 397) ^ (From.GetHashCode());
                hashCode = (hashCode * 397) ^ (TransportType.GetHashCode());
                hashCode = (hashCode * 397) ^ (To != null ? To.GetHashCode() : 0);
                return hashCode;
            }
        }

        public void Deconstruct(out TransportTycoon.Location from, out TransportTycoon.TransportType transportType, out TransportTycoon.Location? to)
        {
            from = From;
            transportType = TransportType;
            to = To;
        }

        #endregion Equality and Deconstruct Members

    }

}

